{"version":3,"sources":["components/QuizQuestion/index.js","App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","this","props","question","answers","map","v","i","type","value","text","key","className","onClick","correct","nextQuestion","React","Component","TitlePage","state","titleText","currentState","counter","currentQuestion","timeLimit","setState","score","questions","length","console","log","clearInterval","timer","setInterval","possibleAnswers","id","start","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iwBAkBeA,G,uLAfH,IAAD,OACP,OACE,oCACE,4BAAKC,KAAKC,MAAMC,UACfF,KAAKC,MAAME,QAAQC,KAAI,SAACC,EAAGC,GAC1B,OAAO,2BAAOC,KAAK,SACnBC,MAAOH,EAAEI,KAAMC,IAAKJ,EACpBK,UAAU,eACVC,QAAS,SAACC,GAAD,OAAa,EAAKZ,MAAMa,aAAaD,c,GAT7BE,IAAMC,Y,OCQ3BC,E,YACJ,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDiB,MAAQ,CAACC,UAAW,uBACzBC,aATgB,EAUhBC,QAAS,EACTC,gBAAiB,GACjB,EAAKD,QAAU,EACf,EAAKE,UAXU,GAIE,E,0EAUNV,GACPA,GACFb,KAAKwB,SAAS,CAACC,MAAOzB,KAAKkB,MAAMO,MAAM,IAGtCzB,KAAKkB,MAAMI,kBAAoBI,EAAUC,OAAS,EACnDC,QAAQC,IAAI,SAEdC,cAAc9B,KAAK+B,OACnB/B,KAAKwB,SAAS,CACZL,UAAW,sBACXC,aAxBc,EAyBdE,gBAAiBtB,KAAKkB,MAAMI,gBAAkB,O,8BAK3C,IAAD,OACNM,QAAQC,IAAI,aACZ7B,KAAKwB,SAAS,CAACH,QAAQ,IACvBrB,KAAKwB,SAAS,CAACJ,aAnCM,IAoCrBpB,KAAK+B,MAAQC,aAAY,WACvBJ,QAAQC,IAAI,mBACZ,EAAKL,SAAS,CAACH,QAAS,EAAKH,MAAMG,QAAQ,IACvC,EAAKH,MAAMG,QAAU,EAAKE,UAC5B,EAAKC,SAAS,CAACL,UAAW,kBAAoB,EAAKD,MAAMG,WAEzD,EAAKG,SAAS,CAACL,UAAW,eAC1BW,cAAc,EAAKC,UAEpB,O,6BAGE9B,GAAQ,IAAD,OACZ,OACE,yBAAKU,UAAU,OACf,6BAAMX,KAAKuB,UAAYvB,KAAKkB,MAAMG,SAnDf,IAoDjBrB,KAAKkB,MAAME,aACX,kBAAC,EAAD,CAAcjB,QAASuB,EAAU1B,KAAKkB,MAAMI,iBAAiBW,gBAC7D/B,SAAUwB,EAAU1B,KAAKkB,MAAMI,iBAAiBpB,SAChDY,aAAc,SAACD,GAAD,OAAa,EAAKC,aAAaD,MAE7C,wBAAIF,UAAU,SAASX,KAAKkB,MAAMC,WAClC,2BAAOe,GAAG,cAAc3B,KAAK,SAASC,MAAM,QAAQI,QAAS,kBAAM,EAAKuB,gB,GAtDtDpB,IAAMC,WAkEfoB,MANf,WACE,OACE,kBAAC,EAAD,OC5DgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.085be666.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass QuizQuestion extends React.Component {\r\n  render() {\r\n    return(\r\n      <>\r\n        <h2>{this.props.question}</h2>\r\n        {this.props.answers.map((v, i) => {\r\n          return <input type=\"button\"\r\n          value={v.text} key={i}\r\n          className=\"answerButton\"\r\n          onClick={(correct) => this.props.nextQuestion(correct)}></input>\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuizQuestion","import React from 'react';\nimport './App.css';\nimport QuizQuestion from './components/QuizQuestion'\nimport questions from './questions.json'\n\nconst TITLE_STATE = 0\nconst QUESTION_STATE = 1\nconst TIME_LIMIT = 10\nconst FINAL_STATE = 2\n\nclass TitlePage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {titleText: \"Welcome to our Quiz!\",\n    currentState: TITLE_STATE,\n    counter: 0,\n    currentQuestion: 0}\n    this.counter = 0\n    this.timeLimit = TIME_LIMIT\n  }\n  \n  nextQuestion(correct) {\n    if (correct) {\n      this.setState({score: this.state.score+1})\n    }\n    \n    if(this.state.currentQuestion === questions.length - 1) {\n      console.log(\"done\")\n    } else {\n    clearInterval(this.timer)\n    this.setState({\n      titleText: \"You answered Early!\",\n      currentState: FINAL_STATE,\n      currentQuestion: this.state.currentQuestion + 1\n    })\n  }\n}\n\nstart() {\n  console.log(\"Starting!\")\n  this.setState({counter:0})\n  this.setState({currentState: QUESTION_STATE})\n  this.timer = setInterval(() => {\n    console.log(\"INTERVAL CALLED\")\n    this.setState({counter: this.state.counter+1})\n    if (this.state.counter < this.timeLimit) {\n      this.setState({titleText: \"Begin the quiz!\" + this.state.counter})\n    } else {\n      this.setState({titleText: \"Time's up!\"})\n      clearInterval(this.timer)\n    }\n  }, 1000);\n\n}\nrender(props) {\n  return (\n    <div className=\"App\">\n    <div>{this.timeLimit - this.state.counter}</div>\n    {(this.state.currentState === QUESTION_STATE) ? \n      <QuizQuestion answers={questions[this.state.currentQuestion].possibleAnswers}\n      question={questions[this.state.currentQuestion].question}\n      nextQuestion={(correct) => this.nextQuestion(correct)} />\n      :\n      <h1 className='title'>{this.state.titleText}</h1>}\n      <input id='startButton' type=\"button\" value=\"start\" onClick={() => this.start()}></input>\n    </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <TitlePage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}